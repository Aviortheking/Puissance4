{"version":3,"sources":["../node_modules/@dzeio/dom-manager/dist/DOMElement.js","../node_modules/@dzeio/dom-manager/dist/DOMFleetManager.js","../node_modules/@dzeio/dom-manager/dist/index.js","Game.ts","main.ts"],"names":[],"mappings":"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","file":"main.6ae8f54c.js","sourceRoot":"../front-src","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass DOMElement {\r\n    constructor(tagName, options) {\r\n        if (tagName instanceof HTMLElement) {\r\n            this.item = tagName;\r\n            return;\r\n        }\r\n        this.item = document.createElement(tagName, options);\r\n    }\r\n    static create(tagName, options) {\r\n        return new DOMElement(tagName, options);\r\n    }\r\n    static get(query, source) {\r\n        if (!(query instanceof HTMLElement)) {\r\n            const tmp = (source instanceof DOMElement ? source.item : source || document).querySelector(query);\r\n            if (!tmp) {\r\n                return undefined;\r\n            }\r\n            return new DOMElement(tmp);\r\n        }\r\n        return new DOMElement(query);\r\n    }\r\n    on(type, listener, options) {\r\n        this.item.addEventListener(type, listener, options);\r\n        return this;\r\n    }\r\n    off(type, listener) {\r\n        this.item.removeEventListener(type, listener);\r\n        return this;\r\n    }\r\n    text(val) {\r\n        if (typeof val !== 'undefined') {\r\n            this.item.innerText = val;\r\n            return this;\r\n        }\r\n        return this.item.innerText;\r\n    }\r\n    html(val) {\r\n        if (typeof val !== 'undefined') {\r\n            this.item.innerHTML = val;\r\n            return this;\r\n        }\r\n        return this.item.innerHTML;\r\n    }\r\n    addClass(...classes) {\r\n        this.item.classList.add(...classes);\r\n        return this;\r\n    }\r\n    setClass(...classes) {\r\n        this.item.classList.forEach((cls) => {\r\n            if (!classes.includes(cls)) {\r\n                this.item.classList.remove(cls);\r\n            }\r\n        });\r\n        this.addClass(...classes);\r\n        return this;\r\n    }\r\n    classList(...classes) {\r\n        if (!classes) {\r\n            const res = [];\r\n            this.item.classList.forEach((el) => res.push(el));\r\n            return res;\r\n        }\r\n        return this.setClass(...classes);\r\n    }\r\n    toggleClass(...classes) {\r\n        for (const classe of classes) {\r\n            this.item.classList.toggle(classe);\r\n        }\r\n        return this;\r\n    }\r\n    removeClass(...classes) {\r\n        this.item.classList.remove(...classes);\r\n        return this;\r\n    }\r\n    emit(event) {\r\n        if (event in this.item) {\r\n            this.item[event]();\r\n            return this;\r\n        }\r\n        this.item.dispatchEvent(new Event(event));\r\n        return this;\r\n    }\r\n    attr(key, value) {\r\n        if (typeof value === 'undefined') {\r\n            return this.item.getAttribute(key);\r\n        }\r\n        if (value === null) {\r\n            this.item.removeAttribute(key);\r\n            return this;\r\n        }\r\n        if (typeof value === 'boolean') {\r\n            this.item[key] = value;\r\n            return this;\r\n        }\r\n        this.item.setAttribute(key, value);\r\n        return this;\r\n    }\r\n    data(key, value) {\r\n        // @ts-ignore\r\n        return this.attr(`data-${key}`, value);\r\n    }\r\n    style(key, value) {\r\n        if (typeof value === 'undefined') {\r\n            return this.item.style[key];\r\n        }\r\n        this.item.style[key] = value;\r\n        return this;\r\n    }\r\n    exist() {\r\n        return !!this.item;\r\n    }\r\n    placeBefore(item) {\r\n        if (item instanceof DOMElement) {\r\n            item = item.item;\r\n        }\r\n        const parent = item.parentElement;\r\n        if (!parent) {\r\n            throw new Error('can\\'t place DOMElement before item because it has no parent');\r\n        }\r\n        parent.insertBefore(this.item, item);\r\n        return this;\r\n    }\r\n    placeAsChildOf(item) {\r\n        if (item instanceof DOMElement) {\r\n            item = item.item;\r\n        }\r\n        item.appendChild(this.item);\r\n        return this;\r\n    }\r\n    place(verb, item) {\r\n        if (verb === 'before') {\r\n            return this.placeBefore(item);\r\n        }\r\n        else {\r\n            return this.placeAsChildOf(item);\r\n        }\r\n    }\r\n}\r\nexports.default = DOMElement;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _1 = require(\".\");\r\nclass DOMFleetManager {\r\n    constructor(query, source) {\r\n        this.query = query;\r\n        this.source = source;\r\n        this.items = [];\r\n        this.refresh();\r\n    }\r\n    last() {\r\n        return this.items[this.items.length - 1];\r\n    }\r\n    each(fn) {\r\n        this.items.forEach((el, index) => fn(el, index));\r\n    }\r\n    on(type, listener, options) {\r\n        this.each((item) => item.on(type, listener, options));\r\n    }\r\n    off(type, listener) {\r\n        this.each((item) => item.off(type, listener));\r\n    }\r\n    refresh() {\r\n        this.items = [];\r\n        (this.source instanceof _1.DOMElement ? this.source.item : this.source || document).querySelectorAll(this.query).forEach((item) => {\r\n            const element = _1.DOMElement.get(item);\r\n            if (!element) {\r\n                return;\r\n            }\r\n            this.items.push(element);\r\n        });\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this.items;\r\n    }\r\n}\r\nexports.default = DOMFleetManager;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DOMFleetManager = exports.DOMElement = void 0;\r\nconst DOMElement_1 = __importDefault(require(\"./DOMElement\"));\r\nexports.DOMElement = DOMElement_1.default;\r\nconst DOMFleetManager_1 = __importDefault(require(\"./DOMFleetManager\"));\r\nexports.DOMFleetManager = DOMFleetManager_1.default;\r\n","import { DOMElement, DOMFleetManager } from '@dzeio/dom-manager'\nimport { textChangeRangeIsUnchanged } from 'typescript'\n\nexport default class Game {\n\n\tprivate table: DOMElement<HTMLTableElement>\n\tprivate columns: Array<Array<DOMElement>> = []\n\n\tprivate gameStarted = false\n\n\tpublic constructor(\n\t\ttable: HTMLTableElement\n\t) {\n\t\tthis.table = new DOMElement(table)\n\t\tthis.setupGeneral()\n\t}\n\n\tpublic setupGeneral() {\n\t\t// Clear la table\n\t\tthis.columns = []\n\t\tconst rows = new DOMFleetManager('tr', this.table)\n\t\trows.each((item, rowIndex) => {\n\t\t\tconst cells = new DOMFleetManager('td', item)\n\t\t\t// cellIndex = 0-6\n\t\t\tcells.each((cell, cellIndex) => {\n\t\t\t\tif (this.columns.length <= cellIndex) {\n\t\t\t\t\tthis.columns.push([])\n\t\t\t\t}\n\t\t\t\tthis.columns[cellIndex].push(cell)\n\n\t\t\t\tcell\n\t\t\t\t\t.text(' ')\n\t\t\t\t\t.data('color', null)\n\t\t\t\t\t.data('winner', null)\n\t\t\t\tif (cell.data('event-added') === null) {\n\t\t\t\t\tcell.on('click', () => {\n\t\t\t\t\t\tif (this.gameStarted) {\n\t\t\t\t\t\t\tthis.onPlayerMove(cell, cellIndex)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tcell.data('event-added', 'true')\n\t\t\t\t}\n\n\t\t\t\t// Put each cells in the corresponding column\n\n\n\t\t\t})\n\t\t\tconsole.log(this.columns)\n\t\t})\n\n\t\t// Setup la base du jeux\n\t}\n\n\tpublic setRestartButton(btn: DOMElement) {\n\t\tbtn.on('click', () => {\n\t\t\tthis.setupGeneral()\n\t\t\tthis.startSinglePlayer()\n\t\t})\n\t}\n\n\tpublic isWaitingForPlayerMove = false\n\tpublic playerColor: 'red' | 'yellow' = 'red'\n\tpublic gameType: 'single' | 'multi' = 'single'\n\n\tpublic startSinglePlayer() {\n\t\tthis.gameStarted = true\n\t\tthis.isWaitingForPlayerMove = true\n\t}\n\n\tpublic setPlayerTurn(player: boolean) {\n\t\tconst playerShower = DOMElement.get('.playerColor')\n\t\tif (!playerShower) {\n\t\t\treturn\n\t\t}\n\t\tplayerShower.text(player ? this.playerColor : this.playerColor === 'red' ? 'yellow' : 'red')\n\t\tif (player) {\n\t\t\tthis.isWaitingForPlayerMove = true\n\t\t} else {\n\t\t\tif (this.gameType === 'single' && this.gameStarted) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.makeIATakeTurn()\n\t\t\t\t\tthis.setPlayerTurn(true)\n\t\t\t\t}, getRandomInt(200, 500))\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setupMultiplayer() { }\n\n\tpublic onPlayerMove(cell: DOMElement, xPos: number) {\n\t\tif (this.isWaitingForPlayerMove) {\n\t\t\tthis.isWaitingForPlayerMove = !this.makeMove(xPos, this.playerColor)\n\t\t\tif (this.isWaitingForPlayerMove) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (this.gameType === 'single' && this.gameStarted) {\n\t\t\t\tthis.setPlayerTurn(false)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Make a move and return and true if the move was done and false if the move was not done\n\t */\n\tpublic makeMove(xPos: number, color: 'red' | 'yellow'): boolean {\n\n\t\tlet cellToFill: DOMElement | undefined\n\t\tlet yPos = 0\n\t\tfor (let i = 0; i < this.columns[xPos].length; i++) {\n\t\t\tconst cell = this.columns[xPos][i];\n\t\t\tconst color = cell.data('color')\n\t\t\tif (!color) {\n\t\t\t\tcellToFill = cell\n\t\t\t\tyPos = i\n\t\t\t}\n\t\t\tif (color) {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t}\n\t\tconsole.log('cellToFill', cellToFill)\n\t\tif (!cellToFill) {\n\t\t\treturn false\n\t\t}\n\t\tcellToFill.data('color', color)\n\t\tthis.checkWinner(xPos, yPos)\n\t\treturn true\n\t}\n\n\tpublic checkWinner(x: number, y: number) {\n\t\tconst win = this.checkDirection(x, y, 'horizontal') || this.checkDirection(x, y, 'vertical') || this.checkDirection(x, y, 'diagonal-left') || this.checkDirection(x, y, 'diagonal-right')\n\t\tif (win === false) {\n\t\t\tconsole.log('FALSE')\n\t\t\treturn false\n\t\t}\n\t\tconsole.log(win)\n\t\twin.forEach((item) => {\n\t\t\tconsole.log(item.data('winner', 'true'))\n\t\t})\n\t\tthis.gameStarted = false\n\t}\n\n\tpublic checkDirection(x: number, y: number, direction: 'horizontal' | 'vertical' | 'diagonal-left' | 'diagonal-right'): Array<DOMElement> | false {\n\t\tconsole.log('Starting Check', direction)\n\t\tconst color = this.columns[x][y].data('color')\n\t\tif (!color) {\n\t\t\treturn false\n\t\t}\n\t\tconst items = []\n\t\tlet wentReverse: number | undefined\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tlet newX = x\n\t\t\tif (direction === 'horizontal' || direction.startsWith('diagonal')) {\n\t\t\t\tnewX = typeof wentReverse !== 'undefined' ? x + i - wentReverse : x - i\n\t\t\t\tif (direction === 'diagonal-left') {\n\t\t\t\t\tnewX = typeof wentReverse !== 'undefined' ? x - i + wentReverse : x + i\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet newY = y\n\t\t\tif (direction === 'vertical' || direction.startsWith('diagonal')) {\n\t\t\t\tnewY = typeof wentReverse !== 'undefined' ? y + i - wentReverse : y - i\n\t\t\t}\n\n\t\t\tconsole.log('index', i, 'y', newY, 'Y exist', this.isYCorrect(newY))\n\t\t\tconsole.log('index', i, 'x', newX, 'X exist', this.isXCorrect(newX))\n\n\t\t\tif (!this.isYCorrect(newY) || !this.isXCorrect(newX)) {\n\t\t\t\tif (typeof wentReverse === 'undefined') {\n\t\t\t\t\twentReverse = --i\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tconst element = this.columns[newX][newY]\n\n\t\t\tconsole.log('element color', element.data('color'), 'color wanted', color)\n\n\t\t\tif (element.data('color') !== color) {\n\t\t\t\tif (typeof wentReverse === 'undefined') {\n\t\t\t\t\twentReverse = --i\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}\n\t\t\titems.push(element)\n\t\t}\n\t\treturn items\n\t}\n\n\tprivate isXCorrect(x: number) {\n\t\treturn x >= 0 && x < this.columns.length\n\t}\n\n\tprivate isYCorrect(y: number) {\n\t\treturn y >= 0 && y < this.columns[0].length\n\t}\n\n\tpublic makeIATakeTurn() {\n\t\tlet turnDone = false\n\t\twhile (!turnDone) {\n\t\t\tconst pos = getRandomInt(0, this.columns.length - 1)\n\t\t\tturnDone = this.makeMove(pos, 'red')\n\t\t}\n\t}\n\n}\nfunction getRandomInt(min: number, max: number) {\n\treturn Math.floor(Math.random() * ((max + 1) - min)) + min\n}\n\n\n\n// const cell = new DOMElement('tr')\n\n// cell.data('color') // return 'red | 'yello' pour get\n// cell.data('color', 'red') //return void pour set\n","import './style.css'\n\nimport Game from './Game'\nimport { DOMElement } from '@dzeio/dom-manager'\n\nconst table = document.querySelector('table')\n\nif (!table) {\n\tthrow new Error('Table not found')\n}\n\nconst game = new Game(table)\nconst restartBtn = DOMElement.get('.restartBtn')\nif (restartBtn) {\n\tgame.setRestartButton(restartBtn)\n}\n\ngame.playerColor = 'yellow'\ngame.startSinglePlayer()\n\n\nconst ws = new WebSocket('ws://localhost:8080')\nws.onmessage = (event) => {\n\tconsole.log(event.data)\n}\n"]}